import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.DvkhmZaR.js";const g=JSON.parse('{"title":"MySQL 适配 DuckDB","description":"","frontmatter":{},"headers":[],"relativePath":"code/database/mysqltoduckdb.md","filePath":"code/database/mysqltoduckdb.md"}'),h={name:"code/database/mysqltoduckdb.md"},t=n(`<h1 id="mysql-适配-duckdb" tabindex="-1">MySQL 适配 DuckDB <a class="header-anchor" href="#mysql-适配-duckdb" aria-label="Permalink to &quot;MySQL 适配 DuckDB&quot;">​</a></h1><p><code>DuckDB</code> 使用 <code>PostgreSQL</code> 解析器，<code>PostgreSQL</code> 执行更标准的 <code>SQL</code> 标准</p><h4 id="_1-不能用反引号号" tabindex="-1">1. 不能用反引号号 <a class="header-anchor" href="#_1-不能用反引号号" aria-label="Permalink to &quot;1. 不能用反引号号&quot;">​</a></h4><p><code>MySQL</code> 在对一些保留字字段做引用的时候，通常需要使用反引号，但反引号是 <code>MySQL</code> 自己的实现，不在 <code>SQL</code> 标准中。在 <code>DuckDB</code> 中，永远不要使用反引号，对字段的引用可以用双引号也可以不用</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`date\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zt_action;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zt_action;</span></span></code></pre></div><p>在 <code>DuckDB</code> 中，永远不要使用反引号，对字段的引用可以用双引号也可以不用</p><h4 id="_2-对字段使用双引号-对具体的值使用单引号" tabindex="-1">2.对字段使用双引号，对具体的值使用单引号 <a class="header-anchor" href="#_2-对字段使用双引号-对具体的值使用单引号" aria-label="Permalink to &quot;2.对字段使用双引号，对具体的值使用单引号&quot;">​</a></h4><p>对字段的引用可以用双引号也可以不用，对确切的值，应该使用单引号</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zt_action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deleted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zt_action </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deleted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_3-尽量使用-case-when-语法而不是-if-官方没明说支持-if" tabindex="-1">3.尽量使用 case when 语法而不是 if，官方没明说支持 if <a class="header-anchor" href="#_3-尽量使用-case-when-语法而不是-if-官方没明说支持-if" aria-label="Permalink to &quot;3.尽量使用 case when 语法而不是 if，官方没明说支持 if&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">multiple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="_4-绝大多数的日期函数" tabindex="-1">4.绝大多数的日期函数 <a class="header-anchor" href="#_4-绝大多数的日期函数" aria-label="Permalink to &quot;4.绝大多数的日期函数&quot;">​</a></h4><p>反正基本上都不能直接拿过来用，要去找对应的 <code>DuckDB</code> 实现，举个例子</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 错误</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curdate();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 正确</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_date();</span></span></code></pre></div><h4 id="_5-不要使用-ifnull" tabindex="-1">5.不要使用 IFNULL <a class="header-anchor" href="#_5-不要使用-ifnull" aria-label="Permalink to &quot;5.不要使用 IFNULL&quot;">​</a></h4><p><code>COALESCE</code> 函数接受一个参数列表，并返回第一个非 <code>NULL</code> 值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IFNULL(t3.name, &#39;/&#39;)</span></span>
<span class="line"><span>COALESCE(t3.name, &#39;/&#39;)</span></span></code></pre></div><h4 id="_6-强制转换" tabindex="-1">6. 强制转换 <a class="header-anchor" href="#_6-强制转换" aria-label="Permalink to &quot;6. 强制转换&quot;">​</a></h4><p><code>CAST</code> 并非所有强制转换都是可行的。例如，无法将 <code>INTEGER</code> 转换为 <code>DATE</code>。当无法成功执行强制转换时，强制转换也可能会引发错误。 <code>TRY_CAST</code> 当首选行为不是抛出错误而是返回一个 <code>NULL</code> 值时可以使用。<code>TRY_CAST</code> 永远不会抛出错误。</p><div class="language-mysql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mysql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 会报错</span></span>
<span class="line"><span>CAST(&#39;hello&#39; AS INTEGER)</span></span>
<span class="line"><span>-- 不会报错</span></span>
<span class="line"><span>TRY_CAST(&#39;hello&#39; AS INTEGER)</span></span></code></pre></div>`,20),e=[t];function l(p,k,d,r,c,o){return a(),i("div",null,e)}const y=s(h,[["render",l]]);export{g as __pageData,y as default};
